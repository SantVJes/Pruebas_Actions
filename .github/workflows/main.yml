name: Test API and Run Postman Tests on Linux

on:
  push:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 12345
          POSTGRES_DB: Usuarios
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requeriments_sqlalchemy.txt

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Newman (Postman CLI)
        run: npm install -g newman

      - name: Set up PostgreSQL Database
        env:
          PGPASSWORD: 12345
        run: |
          # Espera a que PostgreSQL est√© listo
          until pg_isready -h localhost -p 5433 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          # Crear la tabla y agregar datos
          psql -h localhost -p 5433 -U postgres -d Usuarios -c "
          CREATE TABLE IF NOT EXISTS usuarios (
              id_usuario SERIAL PRIMARY KEY,
              email VARCHAR(255) UNIQUE NOT NULL,
              password VARCHAR(255) NOT NULL,
              metodo_pago VARCHAR(50),
              status BOOLEAN DEFAULT TRUE,
              perfiles JSONB
          );"

          psql -h localhost -p 5433 -U postgres -d Usuarios -c "
          INSERT INTO usuarios (email, password, metodo_pago, status, perfiles)
          VALUES ('Sanjesvel@hotmail.com', 'Econtra95#', 'tarjeta', TRUE, '{\"perfil1\": \"valor1\"}');
          "

          # Realiza un SELECT para verificar los datos
          psql -h localhost -p 5433 -U postgres -d Usuarios -c "SELECT * FROM usuarios;"


      - name: Build Docker image
        run: |
          docker build -t openapi-server .

      - name: Run Docker container in the background
        run: |
          docker run -d -p 8080:8080 openapi-server

      - name: Wait for server to start
        run: |
          sleep 10

      - name: Run Postman tests with Newman
        run: |
          newman run openapi_server/test/Test_Api_Usuarios.postman_collection.json
        env:
          BASE_URL: http://localhost:8080
